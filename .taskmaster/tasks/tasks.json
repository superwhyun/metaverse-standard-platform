{
  "version": "1.0.0",
  "metadata": {
    "created": "2025-08-15",
    "projectName": "Metaverse International Standards Platform",
    "description": "메타버스 국제표준화 동향 및 표준 검색 플랫폼"
  },
  "tags": {
    "master": {
      "tasks": [],
      "metadata": {
        "created": "2025-08-15",
        "description": "메인 개발 브랜치"
      }
    }
  },
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "모노레포 프로젝트 초기화 및 공통 개발 환경 설정",
        "description": "프론트엔드(React+TS+Vite+Tailwind+Framer Motion)와 백엔드(Node.js 20 LTS + Express + TypeScript) 모노레포를 구성하고 코드 품질/빌드/테스트 도구를 설정한다.",
        "details": "- 구조: repo root에 packages/web(프론트), packages/api(백엔드), packages/shared(공통 타입) 구성. PNPM 워크스페이스 사용.\n- Node 20 LTS, TypeScript strict 모드, 경로 별칭(@shared/*) 설정.\n- Lint/Format: ESLint(typescript-eslint@latest), Prettier(@latest), Husky + lint-staged로 pre-commit 훅.\n- 프론트: Vite 5, React 18, React Router 6.26+, Tailwind CSS 3.4, Framer Motion 11, axios. Vitest + React Testing Library.\n- 백엔드: Express 4.19+, ts-node-dev, Helmet 7, CORS, express-rate-limit 7, Zod로 요청/응답 스키마 검증. Jest + Supertest 테스트.\n- 환경 변수: .env 파일(.env, .env.local)과 zod 기반 런타임 검증. 예) PORT, JWT_SECRET, REFRESH_SECRET, DATABASE_URL(file:./data/app.db), FILE_ROOT(./data), UPLOAD_TMP(./data/uploads/temp).\n- 스크립트: dev(web/api 동시 실행), build, test, typecheck, clean. turbo 혹은 concurrently로 병렬 실행.\n- 접근성/반응형 기본 설정: Tailwind 기반 breakpoints, focus-visible, prefers-reduced-motion 고려.\n- 보안 기본 헤더: Helmet, CORS(허용 origin 화이트리스트), rate limiting(공용 API 100req/15m).\n- 디렉토리 생성 스크립트: data/, data/uploads/temp 자동 생성.\n- Pseudo-code\n  - monorepo\n    - create pnpm-workspace.yaml\n    - packages/web, packages/api, packages/shared 생성\n    - root package.json에 scripts 설정\n    - husky install -> pre-commit: lint-staged\n  - env validation\n    - const Env = z.object({ PORT: z.string().transform(Number), JWT_SECRET: z.string().min(32), ... })\n",
        "testStrategy": "- CI에서 web/api 각각 build 및 typecheck 통과 확인.\n- ESLint/Prettier 적용 검사, husky 훅 동작 확인.\n- vitest, jest 기본 샘플 테스트 실행 성공.\n- 디렉토리 자동 생성 스크립트 실행 후 경로 존재 확인.\n- CORS/Helmet/rate limit 미스 설정 시 4xx/5xx 발생 테스트.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "SQLite 데이터베이스 스키마 설계 및 마이그레이션",
        "description": "회의, 보고서, 사용자, 파일 메타데이터 모델을 SQLite로 설계하고 Prisma로 마이그레이션 및 인덱싱을 구성한다.",
        "details": "- ORM: Prisma 5.x, DATABASE_URL=file:./data/app.db\n- 모델 설계(요약):\n  - Meeting: id(PK), date(Date), agency(text), location(text), category(text), title(text), description(text), createdAt, updatedAt\n  - Report: id(PK), title, description, uploadedAt, filePath, fileName, fileSize(int), mimeType, meetingId(FK), createdAt, updatedAt\n  - User: id, email(unique), passwordHash, role(enum: 'admin'|'user'), createdAt\n  - FileMetadata: id, originalName, storagePath, mimeType, uploadedAt, size(int), reportId(FK nullable)\n- 제약/인덱스:\n  - Meeting(date), Meeting(agency), Report(uploadedAt desc), Report(title), Report(meetingId)\n- FTS 준비: 검색용 FTS5 가상 테이블은 검색 작업에서 구축(트리거 포함)하되 스키마 호환 필드 보유.\n- 초기 시드: 관리자 계정 1개(email, 해시된 패스워드), 샘플 회의/보고서 소수 개.\n- Prisma 마이그레이션 생성 및 적용(prisma migrate dev). PrismaClient 연결 재사용 패턴 구현.\n- Pseudo-code\n  - schema.prisma\n    - datasource sqlite\n    - generator client\n    - model 정의 및 @@index, @@map, @@unique 지정\n  - seed.ts\n    - upsert admin user\n    - 샘플 Meeting, Report insert\n",
        "testStrategy": "- prisma migrate dev 성공 여부와 테이블/인덱스 생성 확인.\n- 제약 조건(FK, unique) 위반 테스트 시 적절한 에러 발생.\n- 시드 스크립트 재실행 시 중복 생성 없이 idempotent 동작 확인.\n- PrismaClient 쿼리 단위 테스트(Jest)로 CRUD 정상 동작 검증.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "백엔드 API 기본 골격 및 JWT 인증 구현",
        "description": "Express 기반 REST API 골격, 공통 미들웨어, 에러 핸들러, JWT 기반 인증/인가 흐름(액세스/리프레시)을 구현한다.",
        "details": "- 라우팅 구조: /api/auth, /api/meetings, /api/reports, /api/files, /api/search\n- 공통 미들웨어: Helmet, CORS, rate-limit, compression, json parser(limit 설정), zod validate, morgan 로깅(개발), 에러 핸들러.\n- 인증: jsonwebtoken 9, argon2 0.31로 비밀번호 해시.\n  - POST /api/auth/login: email+password 검증 -> access(15m) + refresh(7d) 발급. refresh는 httpOnly, secure, sameSite=strict 쿠키.\n  - POST /api/auth/refresh: 리프레시 토큰 검증/회전(rotating) 후 새 access 발급.\n  - POST /api/auth/logout: 리프레시 쿠키 제거.\n  - 미들웨어 requireAuth, requireAdmin(role 검사).\n- 보안: 브루트포스 방지(rate-limit per IP on /auth), 응답에 보안 헤더, 에러 메시지 일반화.\n- 구조: src/app.ts(앱), src/server.ts(부트), src/routes/*, src/middleware/*, src/lib/prisma.ts, src/lib/jwt.ts.\n- Pseudo-code\n  - login\n    - user = prisma.user.findUnique({ email })\n    - if !user or !argon2.verify(hash, pwd) -> 401\n    - access = jwt.sign({ sub: user.id, role: user.role }, { expiresIn: '15m' })\n    - refresh = jwt.sign({ sub: user.id, ver: user.tokenVersion }, { expiresIn: '7d' })\n    - set-cookie('refresh', refresh, httpOnly, secure)\n    - return { access }\n  - requireAdmin\n    - decode access from Authorization: Bearer\n    - if role !== 'admin' -> 403\n",
        "testStrategy": "- Supertest로 /auth 로그인 성공/실패 케이스(잘못된 이메일/비밀번호, 잠금) 검증.\n- 액세스 토큰 만료/리프레시 토큰 회전 시나리오 e2e 검증.\n- 관리자 보호 라우트 접근 제어 테스트(401/403 기대).\n- 보안 헤더/쿠키 속성 검사 및 rate limit 동작 확인.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "파일 업로드/이동/다운로드 서브시스템 구축",
        "description": "임시 업로드 → 검증 → data/YYYY/MM/로 이동하는 파이프라인과 메타데이터 저장, 안전한 다운로드 스트리밍을 구현한다.",
        "details": "- 업로드: Multer(diskStorage)로 UPLOAD_TMP에 저장, 단일/다중 파일 지원.\n- 검증: file-type 라이브러리로 MIME 스니핑, 허용 확장자 화이트리스트(pdf, docx)와 최대 크기 제한(예: 50MB).\n- 저장 경로: data/YYYY/MM/ 구조, 파일명 충돌 시 suffix(-1, -2) 부여 또는 해시 프리픽스.\n- 메타데이터: FileMetadata 및 Report와 연계 저장.\n- 다운로드: /api/files/:id/download, Range 요청 지원, Content-Disposition 안전 설정, 경로 조작 방지.\n- 정적 서빙 최적화: Express static으로 data/ 읽기 전용 제공(인증 필요한 경로는 직접 스트림).\n- 보안: 바이러스 스캔(선택, clamav-daemon 연동 가능) 훅 포인트 제공, Path traversal 방지(path.normalize, root 검사).\n- Pseudo-code\n  - POST /api/files/upload (auth: admin)\n    - save to tmp\n    - detect = fileType.fromFile(tmpPath)\n    - if !allowed -> 400, unlink tmp\n    - const dt = uploadedAt || now\n    - targetDir = path.join(FILE_ROOT, yyyy, mm)\n    - fs.mkdirp(targetDir)\n    - targetName = safe(originalName)\n    - finalPath = uniquePath(targetDir, targetName)\n    - fs.move(tmpPath, finalPath)\n    - meta = prisma.fileMetadata.create({ originalName, storagePath: rel(finalPath), mimeType, size, uploadedAt: dt })\n    - return meta\n  - GET /api/files/:id/download\n    - locate meta, createReadStream with range\n",
        "testStrategy": "- 허용/비허용 MIME 업로드 케이스, 대용량 파일 업로드, 충돌 파일명 처리 테스트.\n- 임시 파일 누수 없는지 확인(tmp 존재 여부 검사).\n- 다운로드 Range 요청으로 부분 전송, 재개 다운로드 테스트.\n- 권한이 필요한 파일에 비인가 접근 시 401/403 확인.",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "회의 캘린더 API 구현",
        "description": "월별 회의 일정 조회, 생성/수정/삭제 및 날짜별 보고서 존재 여부 플래그를 제공하는 API를 구현한다.",
        "details": "- 엔드포인트\n  - GET /api/meetings?year=YYYY&month=MM → 해당 월 회의 목록 + daySummary(일자별 reportCount, hasReport)\n  - POST /api/meetings (admin)\n  - PATCH /api/meetings/:id (admin)\n  - DELETE /api/meetings/:id (admin)\n- 응답 설계: meetings 배열과 days[1..n] 요약 포함하여 프론트 캘린더 마킹 최소화.\n- 조인: Meeting 기준으로 Report count join.\n- Pseudo-code\n  - GET list\n    - start = firstDayOfMonth, end = lastDay\n    - meetings = prisma.meeting.findMany({ where: { date: { gte: start, lte: end } }, include: { _count: { select: { reports: true }}}})\n    - daySummary = reduce meetings/reports to map{ day -> { count, hasReport } }\n    - return { meetings, daySummary }\n",
        "testStrategy": "- 월 경계(말일/말월) 쿼리 정확성 검증.\n- 보고서 연결 없는 회의와 있는 회의 혼재 케이스 테스트.\n- 관리자 CRUD 권한 테스트 및 입력 검증(zod) 실패 케이스.",
        "priority": "high",
        "dependencies": [
          3,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "보고서 메타데이터/뷰어 연동 API 구현",
        "description": "보고서 목록/상세/생성/수정/삭제 API와 파일 다운로드 연계를 제공하고, PDF 뷰어를 위한 스트림 엔드포인트를 마련한다.",
        "details": "- 엔드포인트\n  - GET /api/reports?limit=&offset=&meetingId=&sort=\n  - GET /api/reports/:id\n  - POST /api/reports (admin) — 파일 메타데이터와 연결\n  - PATCH /api/reports/:id (admin)\n  - DELETE /api/reports/:id (admin) — 안전 삭제 플래그 후 파일 정리 옵션\n  - GET /api/reports/:id/file — pdfjs용 application/pdf 스트림(권한 정책: 공개 열람 가능 요구 시 공개, 기본은 공개)\n- 비즈니스 로직: Report 생성시 FileMetadata.reportId 연결. meetingId 유효성 검사.\n- PDF 뷰어(프론트 대비) 요구사항: pdfjs-dist 4.x 기준 CORS/Range 지원.\n- Pseudo-code\n  - POST /api/reports\n    - validate body { title, description, meetingId, fileMetaId }\n    - ensure fileMeta exists\n    - create report with linkage\n  - GET /:id/file\n    - fetch report -> meta by filePath\n    - res.set('Accept-Ranges', 'bytes'); stream\n",
        "testStrategy": "- 보고서 생성 시 존재하지 않는 meetingId/fileMetaId 참조 에러 검증.\n- 목록 페이징/정렬 동작 확인 및 N+1 없이 include 전략 점검.\n- 파일 스트림 헤더(Content-Type, Accept-Ranges) 정확성 테스트.\n- 삭제 처리 시 메타데이터/파일 정합성 확인.",
        "priority": "high",
        "dependencies": [
          4,
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "SQLite FTS5 기반 고급 검색 API 구현",
        "description": "보고서/회의 텍스트 필드를 통합 인덱싱(FTS5)하고 키워드, 기관/날짜/카테고리 필터를 지원하는 검색 API를 제공한다.",
        "details": "- FTS5 가상 테이블: reports_fts(title, description, agency, category, content='reports', content_rowid='id') 등. 실제는 Report + Meeting 조인 정보를 트리거로 동기화.\n- 동기화 트리거: Report/Meeting insert/update/delete 시 reports_fts 업데이트.\n- 쿼리: MATCH 연산자와 bm25 점수, 필터(agency, date range, category) 조합.\n- 엔드포인트: GET /api/search?q=&agency=&from=&to=&category=&limit=&offset=\n- 정규화/토크나이저: unicode61, removeDiacritics=1.\n- Pseudo-code\n  - SQL\n    - CREATE VIRTUAL TABLE reports_fts USING fts5(title, description, agency, category, content='Report', content_rowid='id', tokenize='unicode61');\n    - 트리거: AFTER INSERT ON Report -> INSERT INTO reports_fts(rowid, title, description, agency, category) VALUES (new.id, new.title, new.description, m.agency, m.category)\n  - search handler\n    - WHERE reports_fts MATCH query\n    - JOIN Report r ON r.id = reports_fts.rowid JOIN Meeting m ON r.meetingId = m.id\n    - AND filters\n    - ORDER BY bm25(reports_fts)\n",
        "testStrategy": "- 인덱스 생성/트리거 동기화 테스트(삽입/수정/삭제 후 즉시 검색 결과 반영).\n- 빈 검색어/특수문자 에러 처리 및 입력 정규화 테스트.\n- 필터 조합(기관+기간+카테고리) 정확성 검증.\n- 대량 데이터(샘플 10k)에서 성능 측정(응답 < 500ms 목표)과 인덱스 전략 점검.",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "프론트엔드 기본 구조/라우팅/상태관리 설정",
        "description": "캘린더(중앙), 보고서 목록(좌측), 관리자(우측), 보고서 상세(아래) 페이지 골격과 공통 UI, API 클라이언트를 구성한다.",
        "details": "- React Router 라우트: '/', '/reports', '/admin', '/report/:id'. 레이아웃 컴포넌트로 4면 네비게이션 구조 배치.\n- Tailwind 설정: 색상/타이포 스케일, 다크모드 지원(optional), 반응형 그리드.\n- API 클라이언트: axios 인스턴스(baseURL=/api, interceptor로 access 토큰 주입/401 시 refresh 흐름).\n- 전역 상태: React Query(TanStack Query 5)로 서버 상태 캐싱, 스켈레톤/에러 바운더리 구성.\n- 접근성: 스킵 링크, 키보드 포커스, aria 속성 기본 템플릿.\n- 기본 페이지\n  - CalendarPage: 월 변경, 일자 클릭 콜백(보고서로 이동)\n  - ReportsListPage: 페이징/정렬\n  - ReportDetailPage: pdfjs 뷰어 컨테이너\n  - AdminPage: 로그인 폼 placeholder\n- Pseudo-code\n  - routes\n    - <Route path=\"/\" element={<CalendarPage />}/>\n    - <Route path=\"/reports\" element={<ReportsListPage />}/>\n    - <Route path=\"/report/:id\" element={<ReportDetailPage />}/>\n    - <Route path=\"/admin\" element={<AdminPage />}/>\n",
        "testStrategy": "- 라우팅 전환 시 상태 유지/에러 경계 동작 확인.\n- API 클라이언트 토큰 재발급 플로우 모킹 테스트.\n- 반응형 레이아웃 스냅샷/뷰포트별 시각 검증.\n- 접근성 퀵체크(axe 자동화) 및 키보드 탐색 가능 여부.",
        "priority": "medium",
        "dependencies": [
          1,
          3,
          5,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "스무스 페이지 전환 및 키보드/스크롤 네비게이션 구현",
        "description": "Framer Motion으로 연결된 종이 효과의 슬라이딩, 좌우 화살표 키, 수직 스크롤 전환을 60fps 목표로 구현한다.",
        "details": "- 전환 사양: 300~500ms, easing(cubic-bezier(0.22, 1, 0.36, 1)), 하드웨어 가속(transform만), will-change 사용.\n- 구조: 전체를 하나의 캔버스로 간주하고 x/y 오프셋으로 뷰 이동. 좌우(보고서 목록/관리자), 아래(보고서 상세)로 전환.\n- 키 핸들링: ArrowLeft -> '/reports', ArrowRight -> '/admin', 캘린더에서 Wheel/ScrollDown -> '/reports'. History back 시 부드러운 복귀.\n- 성능 최적화: 이미지/PDF 뷰어 lazy mount, MotionValue로 드라이브, reduced motion 선호시 애니메이션 비활성화.\n- 터치 제스처: 기본 스와이프(모바일) detect하여 동일 네비게이션 트리거.\n- Pseudo-code\n  - const x = useMotionValue(0); const y = useMotionValue(0)\n  - useEffect on route change -> animate x/y to targets\n  - window.addEventListener('keydown', (e) => if ArrowLeft navigate('/reports'); if ArrowRight navigate('/admin'))\n  - onWheel in CalendarPage: if deltaY > threshold navigate('/reports')\n  - <motion.div style={{ x, y }} transition={{ duration: 0.4, ease: [0.22,1,0.36,1] }}>\n",
        "testStrategy": "- Lighthouse 성능 검토: 프레임 드롭 없이 60fps 유지(DevTools Performance).\n- 키보드/터치 제스처 이벤트 충돌 방지(입력 필드 포커스 시 비활성) 테스트.\n- prefers-reduced-motion=true 환경에서 애니메이션 비활성 확인.\n- 라우팅 전환 시 스크롤 위치/포커스 관리 테스트.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "관리자 UI 및 콘텐츠 관리 도구 구현",
        "description": "관리자 인증, 회의/보고서 CRUD, 파일 업로드/연결, 유효성 검증과 접근 제어를 포함한 관리자 인터페이스를 구현한다.",
        "details": "- 로그인: /admin에서 이메일/패스워드 입력 → /api/auth/login 호출 → 토큰 저장(access 메모리, refresh 쿠키) 및 보호 라우트 이동.\n- 보호 라우팅: requireAdmin HOC/Outlet, 401/403 처리 및 재로그인 유도.\n- 회의 관리: 생성/수정/삭제 폼, 날짜 피커, 기관/카테고리 입력, 목록 테이블(정렬/검색).\n- 보고서 관리: 파일 업로드(POST /files/upload) → 메타 선택 → 보고서 생성. 기존 보고서 편집/삭제.\n- PDF 미리보기: 업로드 후 바로 미리보기 지원(pdfjs iframe/canvas).\n- UX: 낙관적 업데이트(TanStack Query), 에러 토스트, 폼 검증(react-hook-form + zod).\n- 권한: 버튼/액션 표시 제어, 서버 에러 메시지 매핑.\n- Pseudo-code\n  - onSubmitUpload(file)\n    - const meta = await api.files.upload(file)\n    - await api.reports.create({ title, meetingId, fileMetaId: meta.id })\n    - invalidateQueries(['reports'])\n  - AdminRoute\n    - if !user || role !== 'admin' -> navigate('/admin/login')\n",
        "testStrategy": "- 관리자 플로우 e2e(로그인→업로드→보고서 생성→캘린더 표시 확인) 시나리오 테스트(Playwright).\n- 폼 검증 실패/서버 오류 처리 UX 확인.\n- 권한 없는 사용자의 관리자 페이지 접근 차단 확인.\n- 업로드 후 파일/메타-보고서 연결 정합성 검증.",
        "priority": "high",
        "dependencies": [
          3,
          4,
          5,
          6,
          8
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-15T14:25:00.088Z",
      "updated": "2025-08-15T14:25:00.088Z",
      "description": "Tasks for master context"
    }
  }
}